datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

enum Role {
  ADMIN
  USER
}

enum UserStatus {
  INVITED
  DECLINED
  ACCEPTED
}

model User {
  id                  Int        @id @default(autoincrement())
  email               String     @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  firstName           String?
  lastName            String?
  avatar              String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @default(now())
  wishLists           WishList[]
  santaPairings       Pairing[]  @relation("SantaPairings")
  personPairings      Pairing[]  @relation("PersonPairings")
  fromThankYous       ThankYou[] @relation("FromThankYous")
  toThankYous         ThankYou[] @relation("ToThankYous")
}

model Event {
  id           Int      @id @default(autoincrement())
  name         String
  sendReminder Boolean  @default(false)
  date         DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  pairings     Pairing[]
  thankYous    ThankYou[]
  wishLists    WishList[]
}

model Pairing {
  id        Int      @id @default(autoincrement())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  santaId   Int
  santa     User     @relation("SantaPairings", fields: [santaId], references: [id])
  personId  Int
  person    User     @relation("PersonPairings", fields: [personId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ThankYou {
  id        Int      @id @default(autoincrement())
  message   String
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  userId    Int
  user      User     @relation("FromThankYous", fields: [userId], references: [id])
  toUserId  Int
  toUser    User     @relation("ToThankYous", fields: [toUserId], references: [id])
  createdAt DateTime @default(now())
}

model WishList {
  id              Int      @id @default(autoincrement())
  name            String
  url             String
  siteImage       String
  siteTitle       String
  SiteDescription String
  order           Int
  eventId         Int
  event           Event    @relation(fields: [eventId], references: [id])
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}
